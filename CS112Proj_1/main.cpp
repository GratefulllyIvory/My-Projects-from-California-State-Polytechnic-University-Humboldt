/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   main.cpp
 * Author: djbb1
 *
 * Created on August 28, 2020, 10:53 AM
 */

#include <cstdlib>#include <iostream>#include <string>#include <cmath>using namespace std;/* * signature: get_restaurants: string[] int -> void * purpose: expects an array intended to hold restaurant *     names and its size, and has the side-effects of: *     *   ASKING the user for THAT MANY restaurant names *     *   CHANGING that argument array to CONTAIN those *         names *     and returns NOTHING. NADA.  *  * tests: *     if you have:     *         const int NUM_DIVES = 3; *         string dives[NUM_DIVES]; *  *     and if you then call: *         get_restaurants(dives, NUM_DIVES); *  *      then it should prompt the user for 3 restaurant names, *      and if the user happens to enter:  *  *      First's *      Dave's *      Mickey Diner *  *      then after this call, dives should contain: *  *      { "First's", "Dave's", "Mickey Diner" } *  *      if you have:    *          const int NUM_FAVES = 4; *          string faves[NUM_FAVES]; *  *      and if you then call: *          get_restaurants(faves, NUM_FAVES); *  *      then it should prompt the user for 4 restaurant names, *      and if the user happens to enter:  *  *      Tony's *      Japhy's *      Arcata Scoop *      Mazzotti's * 
 *      then after this call, faves should contain: *  *      {"Tony's", "Japhy's", "Arcata Scoop", "Mazzotti's"} */void get_restaurants(string restaurants[], int size){    // ask the user to enter restaurant names to fill the    //    given array   for (int index = 0; index < size; index++)   {       cout << "enter next restaurant name: ";       getline(cin, restaurants[index]);   }     // and you do NOT need a return statement in a void function}/*---    test the function above ---*/int main(){    cout << boolalpha;    // testing get_restaurants in the main function,    //     things get a BIT more involved, because need     //     to somehow SHOW the now-filled argument array!    cout << endl;    cout << "*** Testing get_restaurants ***" << endl;    // declare an example argument array to be filled by get_restaurants    const int NUM_DIVES = 3;    string dives[NUM_DIVES];    // and give user the "instructions" for this test    cout << endl;    cout << "PLEASE enter First's - Dave's - Mickey Diner when asked:"          << endl << endl;    // NOTE how you call a void function!    //     NOT in a cout! NOT in an assignment statement!    //     It has NO return value!    get_restaurants(dives, NUM_DIVES);    // now show user the contents of dives, to see if get_restaurants    //     filled it correctly:    cout << endl;    cout << "dives should NOW contain THOSE names; does it?"     << endl          << "============" << endl;
    for (int i=0; i < NUM_DIVES; i++)    {        cout << dives[i] << endl;    }    cout << endl;    // and here is the 2nd test of get_restaurants    const int NUM_FAVES = 4;    string faves[NUM_FAVES];    cout << "PLEASE enter " << endl         << "    Tony's - Japhy's - Arcata Scoop - Mazzotti's" << endl         <<  "   when asked:"           << endl << endl;    get_restaurants(faves, NUM_FAVES);    cout << endl;    cout << "faves should NOW contain THOSE names; does it?"     << endl          << "============" << endl;    for (int i = 0; i < NUM_FAVES; i+=1)    {        cout << faves[i] << endl;    }    return EXIT_SUCCESS;}